package SoloLexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Switch, Case, Break, Default, Return, Do, While, For, Int, Doble,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parent_a, Parent_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, DosPuntos, P_coma, Punto, Coma, Printf,
    Scanf, Cin, Cout, Const, Short, Unsigned, Struct, Typedef, Palabra_Reservada, Identificador,
    Numero, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, SWITCH_CASE, PRUEBA;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Int Main Parent_a Parent_c Llave_a Return Numero P_coma Llave_c  

;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE |
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SWITCH_CASE 
;
DECLARACION ::= 
    Doble Identificador P_coma |
    Int Identificador P_coma |
    Doble Doble P_coma |
    T_dato Identificador P_coma |
    T_dato Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    T_dato Identificador Op_atribucion Numero Punto Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Igual Numero Punto Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
SWITCH_CASE::= Switch Parent_a Identificador Parent_c Llave_a  Case Numero DosPuntos SENTENCIA Break P_coma Default DosPuntos SENTENCIA Break P_coma Llave_c |
             Switch Parent_a Identificador Parent_c Llave_a  Case Cadena DosPuntos SENTENCIA Palabra_Reservada P_coma Palabra_Reservada DosPuntos SENTENCIA Break P_coma Llave_c 
; 

WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma
;
FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

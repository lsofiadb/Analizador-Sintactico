
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 21 23:08:20 COT 2021
//----------------------------------------------------

package SoloLexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 21 23:08:20 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\014\000\002\002" +
    "\010\000\002\002\013\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\011\000\002" +
    "\004\007\000\002\004\011\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\011\000\002\006\011\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\007\015\000\002\015" +
    "\012\000\002\015\010\000\002\016\016\000\002\010\011" +
    "\000\002\011\013\000\002\012\011\000\002\014\012\000" +
    "\002\014\011\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\020\010\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\021\010" +
    "\000\002\022\006\000\002\023\010\000\002\023\011\000" +
    "\002\024\003\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\006\022\006\044\004\001\002\000\004\036" +
    "\327\001\002\000\004\002\326\001\002\000\004\044\007" +
    "\001\002\000\004\036\010\001\002\000\004\037\011\001" +
    "\002\000\004\040\012\001\002\000\050\006\034\007\035" +
    "\010\042\012\046\013\040\016\043\017\047\020\051\021" +
    "\014\022\030\023\025\025\017\026\041\027\052\030\037" +
    "\050\032\053\033\054\045\064\020\001\002\000\060\006" +
    "\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\041\uffe5\046\uffe5\050\uffe5" +
    "\053\uffe5\054\uffe5\064\uffe5\001\002\000\004\036\273\001" +
    "\002\000\060\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\041\uffec" +
    "\046\uffec\050\uffec\053\uffec\054\uffec\064\uffec\001\002\000" +
    "\060\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\041\uffe3\046\uffe3" +
    "\050\uffe3\053\uffe3\054\uffe3\064\uffe3\001\002\000\004\064" +
    "\272\001\002\000\060\006\uffb7\007\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\041\uffb7\046\uffb7\050\uffb7\053\uffb7\054\uffb7\064\uffb7\001" +
    "\002\000\060\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\041\ufff6" +
    "\046\ufff6\050\ufff6\053\ufff6\054\ufff6\064\ufff6\001\002\000" +
    "\060\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\041\uffe7\046\uffe7" +
    "\050\uffe7\053\uffe7\054\uffe7\064\uffe7\001\002\000\050\006" +
    "\034\007\035\010\042\012\046\013\040\016\266\017\047" +
    "\020\051\021\014\022\030\023\025\025\017\026\041\027" +
    "\052\030\037\050\032\053\033\054\045\064\020\001\002" +
    "\000\060\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\041\ufffc\046" +
    "\ufffc\050\ufffc\053\ufffc\054\ufffc\064\ufffc\001\002\000\004" +
    "\063\264\001\002\000\060\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\041\uffea\046\uffea\050\uffea\053\uffea\054\uffea\064\uffea" +
    "\001\002\000\060\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\041" +
    "\ufffa\046\ufffa\050\ufffa\053\ufffa\054\ufffa\064\ufffa\001\002" +
    "\000\004\063\245\001\002\000\060\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\041\ufff8\046\ufff8\050\ufff8\053\ufff8\054\ufff8" +
    "\064\ufff8\001\002\000\004\064\244\001\002\000\004\032" +
    "\241\001\002\000\006\034\216\063\217\001\002\000\004" +
    "\063\177\001\002\000\060\006\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\041\ufff4\046\ufff4\050\ufff4\053\ufff4\054\ufff4\064\ufff4" +
    "\001\002\000\004\064\176\001\002\000\006\005\163\064" +
    "\162\001\002\000\004\064\161\001\002\000\004\036\147" +
    "\001\002\000\004\064\144\001\002\000\060\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\041\ufff0\046\ufff0\050\ufff0\053\ufff0" +
    "\054\ufff0\064\ufff0\001\002\000\004\032\137\001\002\000" +
    "\004\036\124\001\002\000\004\040\114\001\002\000\060" +
    "\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\041\uffe9\046\uffe9\050" +
    "\uffe9\053\uffe9\054\uffe9\064\uffe9\001\002\000\004\036\056" +
    "\001\002\000\004\064\055\001\002\000\060\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\041\ufff2\046\ufff2\050\ufff2\053\ufff2" +
    "\054\ufff2\064\ufff2\001\002\000\060\006\uffef\007\uffef\010" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\041\uffef\046\uffef\050\uffef\053\uffef\054\uffef" +
    "\064\uffef\001\002\000\060\006\uffbd\007\uffbd\010\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\041\uffbd\046\uffbd\050\uffbd\053\uffbd\054\uffbd\064\uffbd" +
    "\001\002\000\006\035\060\063\061\001\002\000\004\037" +
    "\072\001\002\000\006\037\uffd2\046\uffd2\001\002\000\004" +
    "\032\062\001\002\000\012\005\064\035\065\063\066\064" +
    "\063\001\002\000\006\037\uffd0\046\uffd0\001\002\000\006" +
    "\005\067\063\070\001\002\000\006\037\uffd1\046\uffd1\001" +
    "\002\000\006\037\uffcf\046\uffcf\001\002\000\006\037\uffce" +
    "\046\uffce\001\002\000\004\005\071\001\002\000\006\037" +
    "\uffcd\046\uffcd\001\002\000\004\040\073\001\002\000\046" +
    "\006\034\007\035\010\042\012\046\013\040\017\047\020" +
    "\051\021\014\022\030\023\025\025\017\026\041\027\052" +
    "\030\037\050\032\053\033\054\045\064\020\001\002\000" +
    "\050\006\034\007\035\010\042\012\046\013\040\017\047" +
    "\020\051\021\014\022\030\023\025\025\017\026\041\027" +
    "\052\030\037\041\105\050\032\053\033\054\045\064\020" +
    "\001\002\000\060\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\041" +
    "\uffe4\046\uffe4\050\uffe4\053\uffe4\054\uffe4\064\uffe4\001\002" +
    "\000\060\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\041\uffe2\046" +
    "\uffe2\050\uffe2\053\uffe2\054\uffe2\064\uffe2\001\002\000\060" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\041\uffed\046\uffed\050" +
    "\uffed\053\uffed\054\uffed\064\uffed\001\002\000\060\006\ufff7" +
    "\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\041\ufff7\046\ufff7\050\ufff7\053" +
    "\ufff7\054\ufff7\064\ufff7\001\002\000\060\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\041\uffe6\046\uffe6\050\uffe6\053\uffe6\054" +
    "\uffe6\064\uffe6\001\002\000\060\006\ufffd\007\ufffd\010\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\041\ufffd\046\ufffd\050\ufffd\053\ufffd\054\ufffd\064" +
    "\ufffd\001\002\000\060\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\041\uffeb\046\uffeb\050\uffeb\053\uffeb\054\uffeb\064\uffeb\001" +
    "\002\000\060\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\041\ufffb" +
    "\046\ufffb\050\ufffb\053\ufffb\054\ufffb\064\ufffb\001\002\000" +
    "\060\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\041\uffc8\046\uffc8" +
    "\050\uffc8\053\uffc8\054\uffc8\064\uffc8\001\002\000\060\006" +
    "\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\041\ufff9\046\ufff9\050\ufff9" +
    "\053\ufff9\054\ufff9\064\ufff9\001\002\000\060\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\041\ufff5\046\ufff5\050\ufff5\053\ufff5" +
    "\054\ufff5\064\ufff5\001\002\000\060\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\041\ufff1\046\ufff1\050\ufff1\053\ufff1\054\ufff1" +
    "\064\ufff1\001\002\000\060\006\uffe8\007\uffe8\010\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\041\uffe8\046\uffe8\050\uffe8\053\uffe8\054\uffe8\064\uffe8" +
    "\001\002\000\060\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\041" +
    "\ufff3\046\ufff3\050\ufff3\053\ufff3\054\ufff3\064\ufff3\001\002" +
    "\000\060\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\041\uffee\046" +
    "\uffee\050\uffee\053\uffee\054\uffee\064\uffee\001\002\000\046" +
    "\006\034\007\035\010\042\012\046\013\040\017\047\020" +
    "\051\021\014\022\030\023\025\025\017\026\041\027\052" +
    "\030\037\050\032\053\033\054\045\064\020\001\002\000" +
    "\050\006\034\007\035\010\042\012\046\013\040\017\047" +
    "\020\051\021\014\022\030\023\025\025\017\026\041\027" +
    "\052\030\037\041\116\050\032\053\033\054\045\064\020" +
    "\001\002\000\004\020\117\001\002\000\004\036\120\001" +
    "\002\000\006\035\060\063\061\001\002\000\004\037\122" +
    "\001\002\000\004\046\123\001\002\000\060\006\uffc7\007" +
    "\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\041\uffc7\046\uffc7\050\uffc7\053\uffc7" +
    "\054\uffc7\064\uffc7\001\002\000\004\063\125\001\002\000" +
    "\004\037\126\001\002\000\004\040\127\001\002\000\046" +
    "\006\034\007\035\010\042\012\046\013\040\017\047\020" +
    "\051\021\014\022\030\023\025\025\017\026\041\027\052" +
    "\030\037\050\032\053\033\054\045\064\020\001\002\000" +
    "\050\006\034\007\035\010\042\012\046\013\040\015\131" +
    "\017\047\020\051\021\014\022\030\023\025\025\017\026" +
    "\041\027\052\030\037\050\032\053\033\054\045\064\020" +
    "\001\002\000\004\045\132\001\002\000\046\006\034\007" +
    "\035\010\042\012\046\013\040\017\047\020\051\021\014" +
    "\022\030\023\025\025\017\026\041\027\052\030\037\050" +
    "\032\053\033\054\045\064\020\001\002\000\050\006\034" +
    "\007\035\010\042\012\046\013\040\014\134\017\047\020" +
    "\051\021\014\022\030\023\025\025\017\026\041\027\052" +
    "\030\037\050\032\053\033\054\045\064\020\001\002\000" +
    "\004\046\135\001\002\000\004\041\136\001\002\000\060" +
    "\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\041\uffc9\046\uffc9\050" +
    "\uffc9\053\uffc9\054\uffc9\064\uffc9\001\002\000\004\005\140" +
    "\001\002\000\004\063\141\001\002\000\004\005\142\001" +
    "\002\000\004\046\143\001\002\000\060\006\uffbb\007\uffbb" +
    "\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\041\uffbb\046\uffbb\050\uffbb\053\uffbb\054" +
    "\uffbb\064\uffbb\001\002\000\004\046\145\001\002\000\004" +
    "\041\146\001\002\000\004\002\ufffe\001\002\000\006\035" +
    "\060\063\061\001\002\000\004\037\151\001\002\000\004" +
    "\040\152\001\002\000\046\006\034\007\035\010\042\012" +
    "\046\013\040\017\047\020\051\021\014\022\030\023\025" +
    "\025\017\026\041\027\052\030\037\050\032\053\033\054" +
    "\045\064\020\001\002\000\050\006\034\007\035\010\042" +
    "\012\046\013\040\017\047\020\051\021\014\022\030\023" +
    "\025\025\017\026\041\027\052\030\037\041\154\050\032" +
    "\053\033\054\045\064\020\001\002\000\062\006\uffd3\007" +
    "\uffd3\010\uffd3\011\155\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\041\uffd3\046\uffd3\050\uffd3" +
    "\053\uffd3\054\uffd3\064\uffd3\001\002\000\004\040\156\001" +
    "\002\000\046\006\034\007\035\010\042\012\046\013\040" +
    "\017\047\020\051\021\014\022\030\023\025\025\017\026" +
    "\041\027\052\030\037\050\032\053\033\054\045\064\020" +
    "\001\002\000\050\006\034\007\035\010\042\012\046\013" +
    "\040\017\047\020\051\021\014\022\030\023\025\025\017" +
    "\026\041\027\052\030\037\041\160\050\032\053\033\054" +
    "\045\064\020\001\002\000\060\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\041\uffcc\046\uffcc\050\uffcc\053\uffcc\054\uffcc\064" +
    "\uffcc\001\002\000\060\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\041\uffbe\046\uffbe\050\uffbe\053\uffbe\054\uffbe\064\uffbe\001" +
    "\002\000\004\045\172\001\002\000\004\063\164\001\002" +
    "\000\004\005\165\001\002\000\004\045\166\001\002\000" +
    "\046\006\034\007\035\010\042\012\046\013\040\017\047" +
    "\020\051\021\014\022\030\023\025\025\017\026\041\027" +
    "\052\030\037\050\032\053\033\054\045\064\020\001\002" +
    "\000\050\006\034\007\035\010\042\012\046\013\040\014" +
    "\170\017\047\020\051\021\014\022\030\023\025\025\017" +
    "\026\041\027\052\030\037\050\032\053\033\054\045\064" +
    "\020\001\002\000\004\046\171\001\002\000\060\006\uffcb" +
    "\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\041\uffcb\046\uffcb\050\uffcb\053" +
    "\uffcb\054\uffcb\064\uffcb\001\002\000\046\006\034\007\035" +
    "\010\042\012\046\013\040\017\047\020\051\021\014\022" +
    "\030\023\025\025\017\026\041\027\052\030\037\050\032" +
    "\053\033\054\045\064\020\001\002\000\050\006\034\007" +
    "\035\010\042\012\046\013\040\014\174\017\047\020\051" +
    "\021\014\022\030\023\025\025\017\026\041\027\052\030" +
    "\037\050\032\053\033\054\045\064\020\001\002\000\004" +
    "\046\175\001\002\000\060\006\uffca\007\uffca\010\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\041\uffca\046\uffca\050\uffca\053\uffca\054\uffca\064\uffca" +
    "\001\002\000\060\006\uffbc\007\uffbc\010\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\041" +
    "\uffbc\046\uffbc\050\uffbc\053\uffbc\054\uffbc\064\uffbc\001\002" +
    "\000\006\024\201\033\200\001\002\000\004\005\210\001" +
    "\002\000\004\005\202\001\002\000\006\005\203\063\204" +
    "\001\002\000\004\046\207\001\002\000\004\005\205\001" +
    "\002\000\004\046\206\001\002\000\060\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\041\uffd4\046\uffd4\050\uffd4\053\uffd4\054" +
    "\uffd4\064\uffd4\001\002\000\060\006\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\041\uffd6\046\uffd6\050\uffd6\053\uffd6\054\uffd6\064" +
    "\uffd6\001\002\000\006\005\211\063\212\001\002\000\004" +
    "\046\215\001\002\000\004\005\213\001\002\000\004\046" +
    "\214\001\002\000\060\006\uffd5\007\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\041\uffd5\046\uffd5\050\uffd5\053\uffd5\054\uffd5\064\uffd5\001" +
    "\002\000\060\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\041\uffd7" +
    "\046\uffd7\050\uffd7\053\uffd7\054\uffd7\064\uffd7\001\002\000" +
    "\004\063\237\001\002\000\012\024\223\033\220\034\222" +
    "\046\221\001\002\000\004\064\232\001\002\000\060\006" +
    "\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\041\uffdf\046\uffdf\050\uffdf" +
    "\053\uffdf\054\uffdf\064\uffdf\001\002\000\004\046\231\001" +
    "\002\000\004\064\224\001\002\000\006\046\225\047\226" +
    "\001\002\000\060\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\041" +
    "\uffdb\046\uffdb\050\uffdb\053\uffdb\054\uffdb\064\uffdb\001\002" +
    "\000\004\064\227\001\002\000\004\046\230\001\002\000" +
    "\060\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\041\uffda\046\uffda" +
    "\050\uffda\053\uffda\054\uffda\064\uffda\001\002\000\060\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\041\uffd9\046\uffd9\050\uffd9" +
    "\053\uffd9\054\uffd9\064\uffd9\001\002\000\006\046\233\047" +
    "\234\001\002\000\060\006\uffde\007\uffde\010\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\041\uffde\046\uffde\050\uffde\053\uffde\054\uffde\064\uffde\001" +
    "\002\000\004\064\235\001\002\000\004\046\236\001\002" +
    "\000\060\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\041\uffdc\046" +
    "\uffdc\050\uffdc\053\uffdc\054\uffdc\064\uffdc\001\002\000\004" +
    "\046\240\001\002\000\060\006\uffd8\007\uffd8\010\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\041\uffd8\046\uffd8\050\uffd8\053\uffd8\054\uffd8\064\uffd8" +
    "\001\002\000\004\063\242\001\002\000\004\046\243\001" +
    "\002\000\060\006\uffba\007\uffba\010\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\041\uffba" +
    "\046\uffba\050\uffba\053\uffba\054\uffba\064\uffba\001\002\000" +
    "\060\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\041\uffb6\046\uffb6" +
    "\050\uffb6\053\uffb6\054\uffb6\064\uffb6\001\002\000\010\024" +
    "\250\042\247\046\246\001\002\000\060\006\uffe0\007\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\041\uffe0\046\uffe0\050\uffe0\053\uffe0\054" +
    "\uffe0\064\uffe0\001\002\000\004\064\261\001\002\000\006" +
    "\040\252\064\251\001\002\000\050\006\034\007\035\010" +
    "\042\012\046\013\040\017\047\020\051\021\014\022\030" +
    "\023\025\025\017\026\041\027\052\030\037\046\257\050" +
    "\032\053\033\054\045\064\020\001\002\000\046\006\034" +
    "\007\035\010\042\012\046\013\040\017\047\020\051\021" +
    "\014\022\030\023\025\025\017\026\041\027\052\030\037" +
    "\050\032\053\033\054\045\064\020\001\002\000\050\006" +
    "\034\007\035\010\042\012\046\013\040\017\047\020\051" +
    "\021\014\022\030\023\025\025\017\026\041\027\052\030" +
    "\037\041\254\050\032\053\033\054\045\064\020\001\002" +
    "\000\004\046\255\001\002\000\060\006\uffb8\007\uffb8\010" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\041\uffb8\046\uffb8\050\uffb8\053\uffb8\054\uffb8" +
    "\064\uffb8\001\002\000\050\006\034\007\035\010\042\012" +
    "\046\013\040\017\047\020\051\021\014\022\030\023\025" +
    "\025\017\026\041\027\052\030\037\046\260\050\032\053" +
    "\033\054\045\064\020\001\002\000\060\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\041\uffdd\046\uffdd\050\uffdd\053\uffdd\054" +
    "\uffdd\064\uffdd\001\002\000\060\006\uffc0\007\uffc0\010\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\041\uffc0\046\uffc0\050\uffc0\053\uffc0\054\uffc0\064" +
    "\uffc0\001\002\000\004\043\262\001\002\000\004\046\263" +
    "\001\002\000\060\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\041" +
    "\uffb9\046\uffb9\050\uffb9\053\uffb9\054\uffb9\064\uffb9\001\002" +
    "\000\004\046\265\001\002\000\060\006\uffe1\007\uffe1\010" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\041\uffe1\046\uffe1\050\uffe1\053\uffe1\054\uffe1" +
    "\064\uffe1\001\002\000\004\064\267\001\002\000\004\046" +
    "\270\001\002\000\004\041\271\001\002\000\004\002\000" +
    "\001\002\000\060\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\041" +
    "\uffbf\046\uffbf\050\uffbf\053\uffbf\054\uffbf\064\uffbf\001\002" +
    "\000\006\006\276\063\275\001\002\000\004\037\322\001" +
    "\002\000\004\024\314\001\002\000\004\063\277\001\002" +
    "\000\004\024\300\001\002\000\004\064\301\001\002\000" +
    "\004\046\302\001\002\000\006\035\060\063\061\001\002" +
    "\000\004\046\304\001\002\000\006\034\306\063\307\001" +
    "\002\000\004\037\uffc5\001\002\000\004\063\313\001\002" +
    "\000\006\033\310\034\311\001\002\000\004\064\312\001" +
    "\002\000\004\037\uffc2\001\002\000\004\037\uffc3\001\002" +
    "\000\004\037\uffc1\001\002\000\004\064\315\001\002\000" +
    "\004\046\316\001\002\000\006\035\060\063\061\001\002" +
    "\000\004\046\320\001\002\000\006\034\306\063\307\001" +
    "\002\000\004\037\uffc4\001\002\000\004\040\323\001\002" +
    "\000\046\006\034\007\035\010\042\012\046\013\040\017" +
    "\047\020\051\021\014\022\030\023\025\025\017\026\041" +
    "\027\052\030\037\050\032\053\033\054\045\064\020\001" +
    "\002\000\050\006\034\007\035\010\042\012\046\013\040" +
    "\017\047\020\051\021\014\022\030\023\025\025\017\026" +
    "\041\027\052\030\037\041\325\050\032\053\033\054\045" +
    "\064\020\001\002\000\060\006\uffc6\007\uffc6\010\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\041\uffc6\046\uffc6\050\uffc6\053\uffc6\054\uffc6\064\uffc6" +
    "\001\002\000\004\002\001\001\002\000\004\037\330\001" +
    "\002\000\004\040\331\001\002\000\046\006\034\007\035" +
    "\010\042\012\046\013\040\017\047\020\051\021\014\022" +
    "\030\023\025\025\017\026\041\027\052\030\037\050\032" +
    "\053\033\054\045\064\020\001\002\000\050\006\034\007" +
    "\035\010\042\012\046\013\040\017\047\020\051\021\014" +
    "\022\030\023\025\025\017\026\041\027\052\030\037\041" +
    "\333\050\032\053\033\054\045\064\020\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\022\004\023\006" +
    "\026\007\030\010\020\011\035\012\052\015\043\016\053" +
    "\017\014\020\025\021\047\022\021\023\015\024\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\101\006\103" +
    "\007\105\010\077\011\106\012\111\015\107\016\112\017" +
    "\076\020\102\021\110\022\100\023\075\024\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\073\004\023\006\026\007\030\010" +
    "\020\011\035\012\052\015\043\016\053\017\014\020\025" +
    "\021\047\022\021\023\015\024\012\001\001\000\036\004" +
    "\101\006\103\007\105\010\077\011\106\012\111\015\107" +
    "\016\112\017\076\020\102\021\110\022\100\023\075\024" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\114\004\023\006\026\007\030\010\020\011\035\012" +
    "\052\015\043\016\053\017\014\020\025\021\047\022\021" +
    "\023\015\024\012\001\001\000\036\004\101\006\103\007" +
    "\105\010\077\011\106\012\111\015\107\016\112\017\076" +
    "\020\102\021\110\022\100\023\075\024\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\127\004\023\006\026\007\030\010\020\011\035\012" +
    "\052\015\043\016\053\017\014\020\025\021\047\022\021" +
    "\023\015\024\012\001\001\000\036\004\101\006\103\007" +
    "\105\010\077\011\106\012\111\015\107\016\112\017\076" +
    "\020\102\021\110\022\100\023\075\024\074\001\001\000" +
    "\002\001\001\000\040\003\132\004\023\006\026\007\030" +
    "\010\020\011\035\012\052\015\043\016\053\017\014\020" +
    "\025\021\047\022\021\023\015\024\012\001\001\000\036" +
    "\004\101\006\103\007\105\010\077\011\106\012\111\015" +
    "\107\016\112\017\076\020\102\021\110\022\100\023\075" +
    "\024\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\152\004\023\006\026\007\030\010\020\011\035\012\052" +
    "\015\043\016\053\017\014\020\025\021\047\022\021\023" +
    "\015\024\012\001\001\000\036\004\101\006\103\007\105" +
    "\010\077\011\106\012\111\015\107\016\112\017\076\020" +
    "\102\021\110\022\100\023\075\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\156\004\023\006" +
    "\026\007\030\010\020\011\035\012\052\015\043\016\053" +
    "\017\014\020\025\021\047\022\021\023\015\024\012\001" +
    "\001\000\036\004\101\006\103\007\105\010\077\011\106" +
    "\012\111\015\107\016\112\017\076\020\102\021\110\022" +
    "\100\023\075\024\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\166\004\023\006\026" +
    "\007\030\010\020\011\035\012\052\015\043\016\053\017" +
    "\014\020\025\021\047\022\021\023\015\024\012\001\001" +
    "\000\036\004\101\006\103\007\105\010\077\011\106\012" +
    "\111\015\107\016\112\017\076\020\102\021\110\022\100" +
    "\023\075\024\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\172\004\023\006\026\007\030\010\020" +
    "\011\035\012\052\015\043\016\053\017\014\020\025\021" +
    "\047\022\021\023\015\024\012\001\001\000\036\004\101" +
    "\006\103\007\105\010\077\011\106\012\111\015\107\016" +
    "\112\017\076\020\102\021\110\022\100\023\075\024\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\255\004\023\006\026\007\030\010\020\011" +
    "\035\012\052\015\043\016\053\017\014\020\025\021\047" +
    "\022\021\023\015\024\012\001\001\000\040\003\252\004" +
    "\023\006\026\007\030\010\020\011\035\012\052\015\043" +
    "\016\053\017\014\020\025\021\047\022\021\023\015\024" +
    "\012\001\001\000\036\004\101\006\103\007\105\010\077" +
    "\011\106\012\111\015\107\016\112\017\076\020\102\021" +
    "\110\022\100\023\075\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\101\006\103\007\105\010" +
    "\077\011\106\012\111\015\107\016\112\017\076\020\102" +
    "\021\110\022\100\023\075\024\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\302\001\001\000\002\001\001\000\004\005\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\316\001\001\000\002\001\001\000\004\005\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\323\004" +
    "\023\006\026\007\030\010\020\011\035\012\052\015\043" +
    "\016\053\017\014\020\025\021\047\022\021\023\015\024" +
    "\012\001\001\000\036\004\101\006\103\007\105\010\077" +
    "\011\106\012\111\015\107\016\112\017\076\020\102\021" +
    "\110\022\100\023\075\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\331\004\023\006\026\007\030\010\020\011\035" +
    "\012\052\015\043\016\053\017\014\020\025\021\047\022" +
    "\021\023\015\024\012\001\001\000\036\004\101\006\103" +
    "\007\105\010\077\011\106\012\111\015\107\016\112\017" +
    "\076\020\102\021\110\022\100\023\075\024\074\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARREGLO_DEFINIDO ::= Coma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO_DEFINIDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARREGLO_DEFINIDO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO_DEFINIDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARREGLO ::= Int Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARREGLO ::= Int Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COUT ::= Cout Op_relacional Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACIONES_BASICAS ::= Division Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACIONES_BASICAS ::= Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACIONES_BASICAS ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONES_BASICAS ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONES ::= Int Identificador Igual Numero SENTENCIA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH_CASE ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Doble Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA ARREGLO_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= ARREGLO_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= OPERACIONES_BASICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA OPERACIONES_BASICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parent_a Parent_c Llave_a Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


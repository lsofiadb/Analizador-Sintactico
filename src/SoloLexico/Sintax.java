
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 23 23:03:34 COT 2021
//----------------------------------------------------

package SoloLexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 23 23:03:34 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\014\000\002\002" +
    "\010\000\002\002\013\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\005\000\002\004\011\000\002\004\007\000\002\004\010" +
    "\000\002\004\011\000\002\004\011\000\002\004\007\000" +
    "\002\004\010\000\002\004\007\000\002\004\011\000\002" +
    "\004\011\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\010\000\002\004\006\000\002\004\010" +
    "\000\002\004\015\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\010\000\002\004\006\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\006" +
    "\011\000\002\013\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\007\015\000\002\015\012\000\002\015\010\000\002" +
    "\016\016\000\002\010\011\000\002\011\013\000\002\012" +
    "\011\000\002\014\012\000\002\014\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\020\010\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\021\007\000\002\021\010\000\002\021" +
    "\011\000\002\022\006\000\002\022\013\000\002\025\010" +
    "\000\002\025\010\000\002\025\010\000\002\025\010\000" +
    "\002\023\010\000\002\023\011\000\002\023\010\000\002" +
    "\023\011\000\002\023\010\000\002\023\011\000\002\023" +
    "\010\000\002\023\011\000\002\023\010\000\002\023\011" +
    "\000\002\024\003\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\006\022\006\055\004\001\002\000\004\041" +
    "\u0176\001\002\000\004\002\u0175\001\002\000\004\055\007" +
    "\001\002\000\004\041\010\001\002\000\004\042\011\001" +
    "\002\000\004\051\012\001\002\000\110\007\040\010\016" +
    "\012\047\013\057\016\033\017\052\020\034\021\042\022" +
    "\036\023\026\024\041\025\032\026\051\030\075\031\071" +
    "\032\073\033\035\043\053\044\024\045\031\046\027\047" +
    "\061\050\023\061\014\062\046\063\062\064\067\065\022" +
    "\066\064\067\060\070\015\071\070\072\072\074\066\075" +
    "\074\001\002\000\120\007\ufff8\010\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\052\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072" +
    "\ufff8\074\ufff8\075\ufff8\001\002\000\004\075\u0174\001\002" +
    "\000\040\007\040\022\105\023\103\024\100\025\104\026" +
    "\051\043\053\044\024\046\027\047\061\066\064\067\101" +
    "\070\015\072\072\074\066\001\002\000\004\041\u0169\001" +
    "\002\000\120\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\052\ufff0\057\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\074" +
    "\ufff0\075\ufff0\001\002\000\110\007\040\010\016\012\047" +
    "\013\057\016\u0165\017\052\020\034\021\042\022\036\023" +
    "\026\024\041\025\032\026\051\030\075\031\071\032\073" +
    "\033\035\043\053\044\024\045\031\046\027\047\061\050" +
    "\023\061\014\062\046\063\062\064\067\065\022\066\064" +
    "\067\060\070\015\071\070\072\072\074\066\075\074\001" +
    "\002\000\120\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\052\ufff2\057\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\074" +
    "\ufff2\075\ufff2\001\002\000\004\035\u0160\001\002\000\004" +
    "\074\u015b\001\002\000\004\074\u0159\001\002\000\120\007" +
    "\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\057" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5\001" +
    "\002\000\004\074\u014f\001\002\000\040\007\040\022\105" +
    "\023\103\024\100\025\104\026\051\043\053\044\024\046" +
    "\027\047\061\066\064\067\101\070\015\072\072\074\066" +
    "\001\002\000\120\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\052\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\074\ufff4\075\ufff4\001\002\000\004\074\u0149\001\002\000" +
    "\004\074\u013f\001\002\000\004\075\u013c\001\002\000\004" +
    "\041\u0136\001\002\000\004\075\u0135\001\002\000\004\074" +
    "\u0128\001\002\000\120\007\ufffa\010\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\052\ufffa\057\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\074\ufffa\075\ufffa\001\002\000\004\074\u0114\001\002" +
    "\000\004\074\u010a\001\002\000\004\041\357\001\002\000" +
    "\120\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052" +
    "\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074\uffec\075" +
    "\uffec\001\002\000\120\007\uffef\010\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\052\uffef\057\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\074\uffef\075\uffef\001\002\000\120\007\uffe3\010\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\057\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\074\uffe3\075\uffe3\001\002\000\004" +
    "\041\346\001\002\000\004\041\333\001\002\000\120\007" +
    "\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\057" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\072\uffe7\074\uffe7\075\uffe7\001" +
    "\002\000\004\074\325\001\002\000\004\051\303\001\002" +
    "\000\004\057\302\001\002\000\120\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\052\ufffc\057\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\074\ufffc\075\ufffc\001\002\000\120\007" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\057" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\070\uffe1\071\uffe1\072\uffe1\074\uffe1\075\uffe1\001" +
    "\002\000\120\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\052\uffea\057\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\074" +
    "\uffea\075\uffea\001\002\000\006\005\267\075\266\001\002" +
    "\000\004\074\254\001\002\000\004\026\251\001\002\000" +
    "\004\041\241\001\002\000\120\007\uffe9\010\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\052\uffe9\057\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\074\uffe9\075\uffe9\001\002\000\040\007\040" +
    "\022\105\023\103\024\100\025\104\026\051\043\053\044" +
    "\024\046\027\047\061\066\064\067\101\070\015\072\072" +
    "\074\066\001\002\000\120\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\052\ufff6\057\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\074\ufff6\075\ufff6\001\002\000\010\036\223\037" +
    "\225\056\224\001\002\000\004\035\220\001\002\000\006" +
    "\051\167\074\170\001\002\000\004\075\166\001\002\000" +
    "\040\007\040\022\105\023\103\024\100\025\104\026\051" +
    "\043\053\044\024\046\027\047\061\066\064\067\101\070" +
    "\015\072\072\074\066\001\002\000\004\075\077\001\002" +
    "\000\120\007\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\052\uff93\057\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\074\uff93" +
    "\075\uff93\001\002\000\004\075\076\001\002\000\120\007" +
    "\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\057" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\072\uffaa\074\uffaa\075\uffaa\001" +
    "\002\000\120\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\052\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\074" +
    "\uffa8\075\uffa8\001\002\000\004\074\152\001\002\000\004" +
    "\074\142\001\002\000\120\007\uffc0\010\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\052\uffc0\057\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\074\uffc0\075\uffc0\001\002\000\004\074\126\001" +
    "\002\000\004\074\116\001\002\000\004\074\106\001\002" +
    "\000\010\027\111\036\107\057\110\001\002\000\004\075" +
    "\114\001\002\000\120\007\uffde\010\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\052\uffde\057\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072" +
    "\uffde\074\uffde\075\uffde\001\002\000\004\075\112\001\002" +
    "\000\004\057\113\001\002\000\120\007\uffd6\010\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\052\uffd6\057\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\074\uffd6\075\uffd6\001\002\000\004\057" +
    "\115\001\002\000\120\007\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\052\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\010\027\121\036\117" +
    "\057\120\001\002\000\004\075\124\001\002\000\120\007" +
    "\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb\057" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\074\uffdb\075\uffdb\001" +
    "\002\000\004\075\122\001\002\000\004\057\123\001\002" +
    "\000\120\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\052\uffd2\057\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\074\uffd2" +
    "\075\uffd2\001\002\000\004\057\125\001\002\000\120\007" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\057" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb\075\uffcb\001" +
    "\002\000\010\027\131\036\127\057\130\001\002\000\004" +
    "\075\136\001\002\000\120\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\052\uffdf\057\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\074\uffdf\075\uffdf\001\002\000\004\075\132\001" +
    "\002\000\004\060\133\001\002\000\004\075\134\001\002" +
    "\000\004\057\135\001\002\000\120\007\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\052\uffd7\057\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7" +
    "\071\uffd7\072\uffd7\074\uffd7\075\uffd7\001\002\000\004\060" +
    "\137\001\002\000\004\075\140\001\002\000\004\057\141" +
    "\001\002\000\120\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\052\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\074\uffcf\075\uffcf\001\002\000\010\027\145\036\143\057" +
    "\144\001\002\000\004\075\150\001\002\000\120\007\uffd8" +
    "\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\057\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\074\uffd8\075\uffd8\001\002" +
    "\000\004\075\146\001\002\000\004\057\147\001\002\000" +
    "\120\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052" +
    "\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\004\057\151\001\002\000\120\007\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\057\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\074\uffcc\075\uffcc\001\002" +
    "\000\010\027\155\036\153\057\154\001\002\000\004\075" +
    "\162\001\002\000\120\007\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\052\uffdc\057\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\074\uffdc\075\uffdc\001\002\000\004\075\156\001\002" +
    "\000\004\060\157\001\002\000\004\075\160\001\002\000" +
    "\004\057\161\001\002\000\120\007\uffd3\010\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\052\uffd3\057\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\074\uffd3\075\uffd3\001\002\000\004\060\163" +
    "\001\002\000\004\075\164\001\002\000\004\057\165\001" +
    "\002\000\120\007\uffce\010\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\052\uffce\057\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\074" +
    "\uffce\075\uffce\001\002\000\120\007\uffa9\010\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\052\uffa9\057\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\074\uffa9\075\uffa9\001\002\000\106\007\040" +
    "\010\016\012\047\013\057\017\052\020\034\021\042\022" +
    "\036\023\026\024\041\025\032\026\051\030\075\031\071" +
    "\032\073\033\035\043\053\044\024\045\031\046\027\047" +
    "\061\050\023\061\014\062\046\063\062\064\067\065\022" +
    "\066\064\067\060\070\015\071\070\072\072\074\066\075" +
    "\074\001\002\000\004\051\171\001\002\000\106\007\040" +
    "\010\016\012\047\013\057\017\052\020\034\021\042\022" +
    "\036\023\026\024\041\025\032\026\051\030\075\031\071" +
    "\032\073\033\035\043\053\044\024\045\031\046\027\047" +
    "\061\050\023\061\014\062\046\063\062\064\067\065\022" +
    "\066\064\067\060\070\015\071\070\072\072\074\066\075" +
    "\074\001\002\000\110\007\040\010\016\012\047\013\057" +
    "\017\052\020\034\021\042\022\036\023\026\024\041\025" +
    "\032\026\051\030\075\031\071\032\073\033\035\043\053" +
    "\044\024\045\031\046\027\047\061\050\023\052\174\061" +
    "\014\062\046\063\062\064\067\065\022\066\064\067\060" +
    "\070\015\071\070\072\072\074\066\075\074\001\002\000" +
    "\120\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\052" +
    "\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9\075" +
    "\ufff9\001\002\000\004\057\213\001\002\000\120\007\ufff1" +
    "\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\057\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\120\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\052\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3" +
    "\075\ufff3\001\002\000\120\007\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\052\uffe4\057\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\074\uffe4\075\uffe4\001\002\000\120\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\057\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\001\002\000" +
    "\120\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\052" +
    "\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075" +
    "\ufffb\001\002\000\120\007\uffed\010\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\052\uffed\057\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072" +
    "\uffed\074\uffed\075\uffed\001\002\000\120\007\uffee\010\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\052\uffee\057\uffee\061\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\074\uffee\075\uffee\001\002\000\120" +
    "\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2" +
    "\057\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\075\uffe2" +
    "\001\002\000\120\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\052\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\074\uffe6\075\uffe6\001\002\000\120\007\ufffd\010\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\052\ufffd\057\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\074\ufffd\075\ufffd\001\002\000\120\007" +
    "\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\057" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\072\uffe0\074\uffe0\075\uffe0\001" +
    "\002\000\120\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\052\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\074" +
    "\uffeb\075\uffeb\001\002\000\120\007\uffe8\010\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\052\uffe8\057\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\074\uffe8\075\uffe8\001\002\000\120\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7\057\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\074\ufff7\075\ufff7\001\002" +
    "\000\120\007\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\052\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\074\uff9f" +
    "\075\uff9f\001\002\000\110\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\052\215" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\004\074\216\001\002\000\004\057\217\001\002\000" +
    "\120\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\052" +
    "\uff9e\057\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e\075" +
    "\uff9e\001\002\000\004\074\221\001\002\000\004\057\222" +
    "\001\002\000\120\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\052\uffa3\057\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\074\uffa3\075\uffa3\001\002\000\004\075\233\001\002\000" +
    "\004\047\227\001\002\000\004\057\226\001\002\000\120" +
    "\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6" +
    "\057\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\074\uffc6\075\uffc6" +
    "\001\002\000\004\022\230\001\002\000\004\074\231\001" +
    "\002\000\004\057\232\001\002\000\120\007\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\057\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\074\uffc3\075\uffc3\001\002\000\006" +
    "\057\234\060\235\001\002\000\120\007\uffc9\010\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\052\uffc9\057\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\074\uffc9\075\uffc9\001\002\000\004\075" +
    "\236\001\002\000\004\057\237\001\002\000\120\007\uffca" +
    "\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\057\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\074\uffca\075\uffca\001\002" +
    "\000\120\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\052\uffd9\057\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\074\uffd9" +
    "\075\uffd9\001\002\000\004\005\242\001\002\000\004\074" +
    "\243\001\002\000\004\005\244\001\002\000\004\061\245" +
    "\001\002\000\004\074\246\001\002\000\004\042\247\001" +
    "\002\000\004\057\250\001\002\000\120\007\uffa2\010\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\057\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\074\uffa2\075\uffa2\001\002\000\004" +
    "\074\252\001\002\000\004\057\253\001\002\000\120\007" +
    "\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\057" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\074\uffc2\075\uffc2\001" +
    "\002\000\012\027\256\036\143\053\255\057\144\001\002" +
    "\000\004\075\263\001\002\000\006\051\257\075\146\001" +
    "\002\000\106\007\040\010\016\012\047\013\057\017\052" +
    "\020\034\021\042\022\036\023\026\024\041\025\032\026" +
    "\051\030\075\031\071\032\073\033\035\043\053\044\024" +
    "\045\031\046\027\047\061\050\023\061\014\062\046\063" +
    "\062\064\067\065\022\066\064\067\060\070\015\071\070" +
    "\072\072\074\066\075\074\001\002\000\110\007\040\010" +
    "\016\012\047\013\057\017\052\020\034\021\042\022\036" +
    "\023\026\024\041\025\032\026\051\030\075\031\071\032" +
    "\073\033\035\043\053\044\024\045\031\046\027\047\061" +
    "\050\023\052\261\061\014\062\046\063\062\064\067\065" +
    "\022\066\064\067\060\070\015\071\070\072\072\074\066" +
    "\075\074\001\002\000\004\057\262\001\002\000\120\007" +
    "\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\030\uff98\031\uff98\032\uff98\033\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\052\uff98\057" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\074\uff98\075\uff98\001" +
    "\002\000\004\054\264\001\002\000\004\057\265\001\002" +
    "\000\120\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\052\uff99\057\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065" +
    "\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\074\uff99" +
    "\075\uff99\001\002\000\004\056\276\001\002\000\004\074" +
    "\270\001\002\000\004\005\271\001\002\000\004\056\272" +
    "\001\002\000\106\007\040\010\016\012\047\013\057\017" +
    "\052\020\034\021\042\022\036\023\026\024\041\025\032" +
    "\026\051\030\075\031\071\032\073\033\035\043\053\044" +
    "\024\045\031\046\027\047\061\050\023\061\014\062\046" +
    "\063\062\064\067\065\022\066\064\067\060\070\015\071" +
    "\070\072\072\074\066\075\074\001\002\000\110\007\040" +
    "\010\016\012\047\013\057\014\274\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\061\014\062\046\063\062\064\067" +
    "\065\022\066\064\067\060\070\015\071\070\072\072\074" +
    "\066\075\074\001\002\000\004\057\275\001\002\000\120" +
    "\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6" +
    "\057\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\074\uffb6\075\uffb6" +
    "\001\002\000\106\007\040\010\016\012\047\013\057\017" +
    "\052\020\034\021\042\022\036\023\026\024\041\025\032" +
    "\026\051\030\075\031\071\032\073\033\035\043\053\044" +
    "\024\045\031\046\027\047\061\050\023\061\014\062\046" +
    "\063\062\064\067\065\022\066\064\067\060\070\015\071" +
    "\070\072\072\074\066\075\074\001\002\000\110\007\040" +
    "\010\016\012\047\013\057\014\300\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\061\014\062\046\063\062\064\067" +
    "\065\022\066\064\067\060\070\015\071\070\072\072\074" +
    "\066\075\074\001\002\000\004\057\301\001\002\000\120" +
    "\007\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5" +
    "\057\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\074\uffb5\075\uffb5" +
    "\001\002\000\120\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\052\uffc5\057\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\074\uffc5\075\uffc5\001\002\000\106\007\040\010\016\012" +
    "\047\013\057\017\052\020\034\021\042\022\036\023\026" +
    "\024\041\025\032\026\051\030\075\031\071\032\073\033" +
    "\035\043\053\044\024\045\031\046\027\047\061\050\023" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\110\007\040\010\016\012\047\013\057\017\052\020" +
    "\034\021\042\022\036\023\026\024\041\025\032\026\051" +
    "\030\075\031\071\032\073\033\035\043\053\044\024\045" +
    "\031\046\027\047\061\050\023\052\305\061\014\062\046" +
    "\063\062\064\067\065\022\066\064\067\060\070\015\071" +
    "\070\072\072\074\066\075\074\001\002\000\004\020\306" +
    "\001\002\000\004\041\307\001\002\000\006\040\311\074" +
    "\312\001\002\000\004\042\323\001\002\000\006\042\uffbd" +
    "\057\uffbd\001\002\000\004\035\313\001\002\000\012\005" +
    "\315\040\316\074\317\075\314\001\002\000\006\042\uffbb" +
    "\057\uffbb\001\002\000\006\005\320\074\321\001\002\000" +
    "\006\042\uffbc\057\uffbc\001\002\000\006\042\uffba\057\uffba" +
    "\001\002\000\006\042\uffb9\057\uffb9\001\002\000\004\005" +
    "\322\001\002\000\006\042\uffb8\057\uffb8\001\002\000\004" +
    "\057\324\001\002\000\120\007\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\052\uffb2\057\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\072\uffb2\074\uffb2\075\uffb2\001\002\000\006\027\327\057" +
    "\326\001\002\000\120\007\uffda\010\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\057\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\074\uffda\075\uffda\001\002\000\004\005\330\001\002" +
    "\000\004\005\331\001\002\000\004\057\332\001\002\000" +
    "\120\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052" +
    "\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\074\uffd1\075" +
    "\uffd1\001\002\000\004\074\334\001\002\000\004\042\335" +
    "\001\002\000\004\051\336\001\002\000\106\007\040\010" +
    "\016\012\047\013\057\017\052\020\034\021\042\022\036" +
    "\023\026\024\041\025\032\026\051\030\075\031\071\032" +
    "\073\033\035\043\053\044\024\045\031\046\027\047\061" +
    "\050\023\061\014\062\046\063\062\064\067\065\022\066" +
    "\064\067\060\070\015\071\070\072\072\074\066\075\074" +
    "\001\002\000\110\007\040\010\016\012\047\013\057\015" +
    "\340\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\004" +
    "\056\341\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\014\343\017\052\020" +
    "\034\021\042\022\036\023\026\024\041\025\032\026\051" +
    "\030\075\031\071\032\073\033\035\043\053\044\024\045" +
    "\031\046\027\047\061\050\023\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\004\057\344\001\002" +
    "\000\004\052\345\001\002\000\120\007\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\052\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\074\uffb4\075\uffb4\001\002\000\006\005" +
    "\347\074\350\001\002\000\004\074\353\001\002\000\004" +
    "\042\351\001\002\000\004\057\352\001\002\000\120\007" +
    "\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\057" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\072\uffa6\074\uffa6\075\uffa6\001" +
    "\002\000\004\005\354\001\002\000\004\042\355\001\002" +
    "\000\004\057\356\001\002\000\120\007\uffa4\010\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\052\uffa4\057\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\074\uffa4\075\uffa4\001\002\000\006\022" +
    "\362\074\361\001\002\000\004\042\u0106\001\002\000\004" +
    "\027\u0100\001\002\000\004\074\363\001\002\000\004\027" +
    "\364\001\002\000\004\075\365\001\002\000\004\057\366" +
    "\001\002\000\006\040\311\074\312\001\002\000\004\057" +
    "\370\001\002\000\006\037\373\074\372\001\002\000\004" +
    "\042\uffb0\001\002\000\006\036\375\037\376\001\002\000" +
    "\004\074\374\001\002\000\004\042\uffac\001\002\000\004" +
    "\075\377\001\002\000\004\042\uffad\001\002\000\004\042" +
    "\uffae\001\002\000\004\075\u0101\001\002\000\004\057\u0102" +
    "\001\002\000\006\040\311\074\312\001\002\000\004\057" +
    "\u0104\001\002\000\006\037\373\074\372\001\002\000\004" +
    "\042\uffaf\001\002\000\004\051\u0107\001\002\000\106\007" +
    "\040\010\016\012\047\013\057\017\052\020\034\021\042" +
    "\022\036\023\026\024\041\025\032\026\051\030\075\031" +
    "\071\032\073\033\035\043\053\044\024\045\031\046\027" +
    "\047\061\050\023\061\014\062\046\063\062\064\067\065" +
    "\022\066\064\067\060\070\015\071\070\072\072\074\066" +
    "\075\074\001\002\000\110\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\052\u0109" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\120\007\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\074\uffb1" +
    "\075\uffb1\001\002\000\012\027\u010c\036\153\053\u010b\057" +
    "\154\001\002\000\004\075\u0111\001\002\000\006\051\u010d" +
    "\075\156\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\052\u010f\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\004\057\u0110\001\002" +
    "\000\120\007\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\052\uff96\057\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\074\uff96" +
    "\075\uff96\001\002\000\004\054\u0112\001\002\000\004\057" +
    "\u0113\001\002\000\120\007\uff97\010\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\052\uff97\057\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072" +
    "\uff97\074\uff97\075\uff97\001\002\000\010\027\u0117\036\u0115" +
    "\057\u0116\001\002\000\004\005\u011e\001\002\000\120\007" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\057" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\001" +
    "\002\000\004\005\u0118\001\002\000\006\005\u0119\074\u011a" +
    "\001\002\000\004\057\u011d\001\002\000\004\005\u011b\001" +
    "\002\000\004\057\u011c\001\002\000\120\007\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\057\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\074\uffd4\075\uffd4\001\002\000\120" +
    "\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5" +
    "\057\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\074\uffd5\075\uffd5" +
    "\001\002\000\006\005\u011f\074\u0120\001\002\000\004\057" +
    "\u0127\001\002\000\004\005\u0121\001\002\000\004\057\u0122" +
    "\001\002\000\004\022\u0123\001\002\000\004\074\u0124\001" +
    "\002\000\004\037\u0125\001\002\000\004\057\u0126\001\002" +
    "\000\120\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\074\uffc7" +
    "\075\uffc7\001\002\000\120\007\uffc8\010\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\052\uffc8\057\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\074\uffc8\075\uffc8\001\002\000\012\027\u012a\036" +
    "\107\053\u0129\057\110\001\002\000\004\075\u0132\001\002" +
    "\000\006\051\u012c\075\u012b\001\002\000\110\007\040\010" +
    "\016\012\047\013\057\017\052\020\034\021\042\022\036" +
    "\023\026\024\041\025\032\026\051\030\075\031\071\032" +
    "\073\033\035\043\053\044\024\045\031\046\027\047\061" +
    "\050\023\057\113\061\014\062\046\063\062\064\067\065" +
    "\022\066\064\067\060\070\015\071\070\072\072\074\066" +
    "\075\074\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\052\u012e\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\004\057\u012f\001\002" +
    "\000\120\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\052\uff9c\057\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\074\uff9c" +
    "\075\uff9c\001\002\000\110\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\057\u0131" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\120\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\052\uffab\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\074\uffab" +
    "\075\uffab\001\002\000\004\054\u0133\001\002\000\004\057" +
    "\u0134\001\002\000\120\007\uff9d\010\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\052\uff9d\057\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072" +
    "\uff9d\074\uff9d\075\uff9d\001\002\000\120\007\uffa7\010\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\052\uffa7\057\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\074\uffa7\075\uffa7\001\002\000\006" +
    "\040\311\074\312\001\002\000\004\042\u0138\001\002\000" +
    "\004\051\u0139\001\002\000\106\007\040\010\016\012\047" +
    "\013\057\017\052\020\034\021\042\022\036\023\026\024" +
    "\041\025\032\026\051\030\075\031\071\032\073\033\035" +
    "\043\053\044\024\045\031\046\027\047\061\050\023\061" +
    "\014\062\046\063\062\064\067\065\022\066\064\067\060" +
    "\070\015\071\070\072\072\074\066\075\074\001\002\000" +
    "\110\007\040\010\016\012\047\013\057\017\052\020\034" +
    "\021\042\022\036\023\026\024\041\025\032\026\051\030" +
    "\075\031\071\032\073\033\035\043\053\044\024\045\031" +
    "\046\027\047\061\050\023\052\u013b\061\014\062\046\063" +
    "\062\064\067\065\022\066\064\067\060\070\015\071\070" +
    "\072\072\074\066\075\074\001\002\000\120\007\uffb3\010" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\057\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\074\uffb3\075\uffb3\001\002\000" +
    "\004\057\u013d\001\002\000\004\052\u013e\001\002\000\004" +
    "\002\ufffe\001\002\000\012\027\u0141\036\117\053\u0140\057" +
    "\120\001\002\000\004\075\u0146\001\002\000\006\051\u0142" +
    "\075\122\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\052\u0144\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\004\057\u0145\001\002" +
    "\000\120\007\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\052\uff94\057\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\074\uff94" +
    "\075\uff94\001\002\000\004\054\u0147\001\002\000\004\057" +
    "\u0148\001\002\000\120\007\uff95\010\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\052\uff95\057\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072" +
    "\uff95\074\uff95\075\uff95\001\002\000\004\051\u014a\001\002" +
    "\000\106\007\040\010\016\012\047\013\057\017\052\020" +
    "\034\021\042\022\036\023\026\024\041\025\032\026\051" +
    "\030\075\031\071\032\073\033\035\043\053\044\024\045" +
    "\031\046\027\047\061\050\023\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\110\007\040\010\016" +
    "\012\047\013\057\017\052\020\034\021\042\022\036\023" +
    "\026\024\041\025\032\026\051\030\075\031\071\032\073" +
    "\033\035\043\053\044\024\045\031\046\027\047\061\050" +
    "\023\052\u014c\061\014\062\046\063\062\064\067\065\022" +
    "\066\064\067\060\070\015\071\070\072\072\074\066\075" +
    "\074\001\002\000\004\057\u014d\001\002\000\120\007\uffa1" +
    "\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\057\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\074\uffa1\075\uffa1\001\002" +
    "\000\120\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\052\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\074\uffbf" +
    "\075\uffbf\001\002\000\012\027\u0151\036\127\053\u0150\057" +
    "\130\001\002\000\004\075\u0156\001\002\000\006\051\u0152" +
    "\075\132\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\052\u0154\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\004\057\u0155\001\002" +
    "\000\120\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\052\uff9a\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\074\uff9a" +
    "\075\uff9a\001\002\000\004\054\u0157\001\002\000\004\057" +
    "\u0158\001\002\000\120\007\uff9b\010\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\052\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\074\uff9b\075\uff9b\001\002\000\004\057\u015a\001\002" +
    "\000\120\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\052\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\074\uffc4" +
    "\075\uffc4\001\002\000\004\051\u015c\001\002\000\106\007" +
    "\040\010\016\012\047\013\057\017\052\020\034\021\042" +
    "\022\036\023\026\024\041\025\032\026\051\030\075\031" +
    "\071\032\073\033\035\043\053\044\024\045\031\046\027" +
    "\047\061\050\023\061\014\062\046\063\062\064\067\065" +
    "\022\066\064\067\060\070\015\071\070\072\072\074\066" +
    "\075\074\001\002\000\110\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\052\u015e" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\004\057\u015f\001\002\000\120\007\uffa0\010\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\052\uffa0\057\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\074\uffa0\075\uffa0\001\002\000\004\005" +
    "\u0161\001\002\000\004\074\u0162\001\002\000\004\005\u0163" +
    "\001\002\000\004\057\u0164\001\002\000\120\007\uffa5\010" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\057\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\074\uffa5\075\uffa5\001\002\000" +
    "\004\075\u0166\001\002\000\004\057\u0167\001\002\000\004" +
    "\052\u0168\001\002\000\004\002\000\001\002\000\006\040" +
    "\311\074\312\001\002\000\004\042\u016b\001\002\000\004" +
    "\051\u016c\001\002\000\106\007\040\010\016\012\047\013" +
    "\057\017\052\020\034\021\042\022\036\023\026\024\041" +
    "\025\032\026\051\030\075\031\071\032\073\033\035\043" +
    "\053\044\024\045\031\046\027\047\061\050\023\061\014" +
    "\062\046\063\062\064\067\065\022\066\064\067\060\070" +
    "\015\071\070\072\072\074\066\075\074\001\002\000\110" +
    "\007\040\010\016\012\047\013\057\017\052\020\034\021" +
    "\042\022\036\023\026\024\041\025\032\026\051\030\075" +
    "\031\071\032\073\033\035\043\053\044\024\045\031\046" +
    "\027\047\061\050\023\052\u016e\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\122\007\uffbe\010\uffbe" +
    "\011\u016f\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\057\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\074\uffbe\075\uffbe\001\002" +
    "\000\004\051\u0170\001\002\000\106\007\040\010\016\012" +
    "\047\013\057\017\052\020\034\021\042\022\036\023\026" +
    "\024\041\025\032\026\051\030\075\031\071\032\073\033" +
    "\035\043\053\044\024\045\031\046\027\047\061\050\023" +
    "\061\014\062\046\063\062\064\067\065\022\066\064\067" +
    "\060\070\015\071\070\072\072\074\066\075\074\001\002" +
    "\000\110\007\040\010\016\012\047\013\057\017\052\020" +
    "\034\021\042\022\036\023\026\024\041\025\032\026\051" +
    "\030\075\031\071\032\073\033\035\043\053\044\024\045" +
    "\031\046\027\047\061\050\023\052\u0172\061\014\062\046" +
    "\063\062\064\067\065\022\066\064\067\060\070\015\071" +
    "\070\072\072\074\066\075\074\001\002\000\120\007\uffb7" +
    "\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\057\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\074\uffb7\075\uffb7\001\002" +
    "\000\120\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\052\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\074\uffc1" +
    "\075\uffc1\001\002\000\120\007\uff92\010\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\052\uff92\057\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92" +
    "\072\uff92\074\uff92\075\uff92\001\002\000\004\002\001\001" +
    "\002\000\004\042\u0177\001\002\000\004\051\u0178\001\002" +
    "\000\106\007\040\010\016\012\047\013\057\017\052\020" +
    "\034\021\042\022\036\023\026\024\041\025\032\026\051" +
    "\030\075\031\071\032\073\033\035\043\053\044\024\045" +
    "\031\046\027\047\061\050\023\061\014\062\046\063\062" +
    "\064\067\065\022\066\064\067\060\070\015\071\070\072" +
    "\072\074\066\075\074\001\002\000\110\007\040\010\016" +
    "\012\047\013\057\017\052\020\034\021\042\022\036\023" +
    "\026\024\041\025\032\026\051\030\075\031\071\032\073" +
    "\033\035\043\053\044\024\045\031\046\027\047\061\050" +
    "\023\052\u017a\061\014\062\046\063\062\064\067\065\022" +
    "\066\064\067\060\070\015\071\070\072\072\074\066\075" +
    "\074\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\017\004\053\006" +
    "\036\007\012\010\064\011\027\012\020\015\016\016\043" +
    "\017\042\020\055\021\062\022\047\023\044\024\024\025" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0172\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\205\006\200\007\172\010\211\011\177\012\175" +
    "\015\174\016\202\017\201\020\207\021\210\022\204\023" +
    "\203\024\176\025\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\213\004\053\006\036" +
    "\007\012\010\064\011\027\012\020\015\016\016\043\017" +
    "\042\020\055\021\062\022\047\023\044\024\024\025\054" +
    "\001\001\000\002\001\001\000\042\003\171\004\053\006" +
    "\036\007\012\010\064\011\027\012\020\015\016\016\043" +
    "\017\042\020\055\021\062\022\047\023\044\024\024\025" +
    "\054\001\001\000\040\004\205\006\200\007\172\010\211" +
    "\011\177\012\175\015\174\016\202\017\201\020\207\021" +
    "\210\022\204\023\203\024\176\025\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\205\006\200\007\172\010\211\011\177" +
    "\012\175\015\174\016\202\017\201\020\207\021\210\022" +
    "\204\023\203\024\176\025\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\257\004\053\006\036\007\012\010" +
    "\064\011\027\012\020\015\016\016\043\017\042\020\055" +
    "\021\062\022\047\023\044\024\024\025\054\001\001\000" +
    "\040\004\205\006\200\007\172\010\211\011\177\012\175" +
    "\015\174\016\202\017\201\020\207\021\210\022\204\023" +
    "\203\024\176\025\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\272\004\053\006\036\007" +
    "\012\010\064\011\027\012\020\015\016\016\043\017\042" +
    "\020\055\021\062\022\047\023\044\024\024\025\054\001" +
    "\001\000\040\004\205\006\200\007\172\010\211\011\177" +
    "\012\175\015\174\016\202\017\201\020\207\021\210\022" +
    "\204\023\203\024\176\025\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\276\004\053\006\036\007" +
    "\012\010\064\011\027\012\020\015\016\016\043\017\042" +
    "\020\055\021\062\022\047\023\044\024\024\025\054\001" +
    "\001\000\040\004\205\006\200\007\172\010\211\011\177" +
    "\012\175\015\174\016\202\017\201\020\207\021\210\022" +
    "\204\023\203\024\176\025\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\303\004" +
    "\053\006\036\007\012\010\064\011\027\012\020\015\016" +
    "\016\043\017\042\020\055\021\062\022\047\023\044\024" +
    "\024\025\054\001\001\000\040\004\205\006\200\007\172" +
    "\010\211\011\177\012\175\015\174\016\202\017\201\020" +
    "\207\021\210\022\204\023\203\024\176\025\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\336\004\053\006\036\007\012\010\064\011\027\012" +
    "\020\015\016\016\043\017\042\020\055\021\062\022\047" +
    "\023\044\024\024\025\054\001\001\000\040\004\205\006" +
    "\200\007\172\010\211\011\177\012\175\015\174\016\202" +
    "\017\201\020\207\021\210\022\204\023\203\024\176\025" +
    "\206\001\001\000\002\001\001\000\042\003\341\004\053" +
    "\006\036\007\012\010\064\011\027\012\020\015\016\016" +
    "\043\017\042\020\055\021\062\022\047\023\044\024\024" +
    "\025\054\001\001\000\040\004\205\006\200\007\172\010" +
    "\211\011\177\012\175\015\174\016\202\017\201\020\207" +
    "\021\210\022\204\023\203\024\176\025\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\366\001\001\000\002\001\001\000\004\005\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0102\001\001\000\002\001\001\000\004\005\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u0107\004\053\006\036\007\012\010\064\011\027\012\020" +
    "\015\016\016\043\017\042\020\055\021\062\022\047\023" +
    "\044\024\024\025\054\001\001\000\040\004\205\006\200" +
    "\007\172\010\211\011\177\012\175\015\174\016\202\017" +
    "\201\020\207\021\210\022\204\023\203\024\176\025\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u010d\004\053\006\036" +
    "\007\012\010\064\011\027\012\020\015\016\016\043\017" +
    "\042\020\055\021\062\022\047\023\044\024\024\025\054" +
    "\001\001\000\040\004\205\006\200\007\172\010\211\011" +
    "\177\012\175\015\174\016\202\017\201\020\207\021\210" +
    "\022\204\023\203\024\176\025\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u012f\004\053\006\036" +
    "\007\012\010\064\011\027\012\020\015\016\016\043\017" +
    "\042\020\055\021\062\022\047\023\044\024\024\025\054" +
    "\001\001\000\042\003\u012c\004\053\006\036\007\012\010" +
    "\064\011\027\012\020\015\016\016\043\017\042\020\055" +
    "\021\062\022\047\023\044\024\024\025\054\001\001\000" +
    "\040\004\205\006\200\007\172\010\211\011\177\012\175" +
    "\015\174\016\202\017\201\020\207\021\210\022\204\023" +
    "\203\024\176\025\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\205\006\200\007\172\010\211\011" +
    "\177\012\175\015\174\016\202\017\201\020\207\021\210" +
    "\022\204\023\203\024\176\025\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u0139\004\053\006\036" +
    "\007\012\010\064\011\027\012\020\015\016\016\043\017" +
    "\042\020\055\021\062\022\047\023\044\024\024\025\054" +
    "\001\001\000\040\004\205\006\200\007\172\010\211\011" +
    "\177\012\175\015\174\016\202\017\201\020\207\021\210" +
    "\022\204\023\203\024\176\025\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\u0142\004\053\006\036\007\012\010\064\011\027" +
    "\012\020\015\016\016\043\017\042\020\055\021\062\022" +
    "\047\023\044\024\024\025\054\001\001\000\040\004\205" +
    "\006\200\007\172\010\211\011\177\012\175\015\174\016" +
    "\202\017\201\020\207\021\210\022\204\023\203\024\176" +
    "\025\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\u014a\004\053\006\036\007\012\010" +
    "\064\011\027\012\020\015\016\016\043\017\042\020\055" +
    "\021\062\022\047\023\044\024\024\025\054\001\001\000" +
    "\040\004\205\006\200\007\172\010\211\011\177\012\175" +
    "\015\174\016\202\017\201\020\207\021\210\022\204\023" +
    "\203\024\176\025\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u0152\004\053\006\036" +
    "\007\012\010\064\011\027\012\020\015\016\016\043\017" +
    "\042\020\055\021\062\022\047\023\044\024\024\025\054" +
    "\001\001\000\040\004\205\006\200\007\172\010\211\011" +
    "\177\012\175\015\174\016\202\017\201\020\207\021\210" +
    "\022\204\023\203\024\176\025\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\u015c\004\053\006\036\007\012" +
    "\010\064\011\027\012\020\015\016\016\043\017\042\020" +
    "\055\021\062\022\047\023\044\024\024\025\054\001\001" +
    "\000\040\004\205\006\200\007\172\010\211\011\177\012" +
    "\175\015\174\016\202\017\201\020\207\021\210\022\204" +
    "\023\203\024\176\025\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0169\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\u016c\004\053\006\036\007\012\010\064" +
    "\011\027\012\020\015\016\016\043\017\042\020\055\021" +
    "\062\022\047\023\044\024\024\025\054\001\001\000\040" +
    "\004\205\006\200\007\172\010\211\011\177\012\175\015" +
    "\174\016\202\017\201\020\207\021\210\022\204\023\203" +
    "\024\176\025\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\u0170\004\053\006\036\007\012\010\064" +
    "\011\027\012\020\015\016\016\043\017\042\020\055\021" +
    "\062\022\047\023\044\024\024\025\054\001\001\000\040" +
    "\004\205\006\200\007\172\010\211\011\177\012\175\015" +
    "\174\016\202\017\201\020\207\021\210\022\204\023\203" +
    "\024\176\025\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\u0178\004\053\006\036\007" +
    "\012\010\064\011\027\012\020\015\016\016\043\017\042" +
    "\020\055\021\062\022\047\023\044\024\024\025\054\001" +
    "\001\000\040\004\205\006\200\007\172\010\211\011\177" +
    "\012\175\015\174\016\202\017\201\020\207\021\210\022" +
    "\204\023\203\024\176\025\206\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARREGLO_DEFINIDO ::= Coma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO_DEFINIDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARREGLO_DEFINIDO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO_DEFINIDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARREGLO ::= Long Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARREGLO ::= Long Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARREGLO ::= Float Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARREGLO ::= Float Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARREGLO ::= Short Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARREGLO ::= Short Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARREGLO ::= Doble Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARREGLO ::= Doble Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARREGLO ::= Int Identificador Igual Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARREGLO ::= Int Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESTRUCTURAS ::= Struct Llave_a SENTENCIA Llave_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ESTRUCTURAS ::= Struct Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ESTRUCTURAS ::= Enum Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ESTRUCTURAS ::= Union Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CIN ::= Scanf Parent_a Comillas Identificador Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COUT ::= Printf Parent_a Comillas Identificador Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COUT ::= Cout Op_relacional Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COUT ::= Printf Parent_a Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACIONES_BASICAS ::= Division Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONES_BASICAS ::= Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONES_BASICAS ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACIONES_BASICAS ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_BASICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERACIONES ::= Int Identificador Igual Numero SENTENCIA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCH_CASE ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Extern DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Typedef DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Unsigned DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Register Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Identificador DosPuntos Register Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Goto Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Long Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Short Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Float Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Doble Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Doble Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Const DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Doble Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA ESTRUCTURAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= ESTRUCTURAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA ARREGLO_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= ARREGLO_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= OPERACIONES_BASICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA OPERACIONES_BASICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parent_a Parent_c Llave_a Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

